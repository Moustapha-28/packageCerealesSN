mutate(qte_kg = ifelse(!is.na(qte_consommee) & !is.na(poids_kg),
qte_consommee * poids_kg,
NA_real_))
###   3.2 Variables Finales Requises
cereales <- cereales %>%
mutate(
frequence_achat = case_when(
dernier_achat == 1 ~ 7.0,
dernier_achat == 2 ~ 3.0,
dernier_achat == 3 ~ 1.0,
dernier_achat == 4 ~ 0.2,
dernier_achat == 5 ~ 0.0,
TRUE ~ NA_real_
)
)
Base_X1_SemiApuree <- cereales %>%
select(
menage_id,
produit,
unite_cons,
taille_cons,
qte_consommee,
valeur_consommee,
qte_kg,
val_achat_cons,
val_auto_cons,
val_don_cons,
frequence_achat
)
# ---------------------------------------------------------------------------------------------
####  4. Nettoyage et Validation des Données
###   4.1 Détection des Valeurs Aberrantes
analyser_variable_quantitative <- function(data, var_name) {
var <- data[[var_name]]
# Résumé statistique
print(summary(var))
cat("Écart-type :", sd(var, na.rm = TRUE), "\n")
cat("Nombre de NA :", sum(is.na(var)), "\n\n")
# Bornes IQR
q1 <- quantile(var, 0.25, na.rm = TRUE)
q3 <- quantile(var, 0.75, na.rm = TRUE)
iqr <- q3 - q1
borne_inf <- q1 - 1.5 * iqr
borne_sup <- q3 + 1.5 * iqr
cat("Borne inférieure :", borne_inf, "\n")
cat("Borne supérieure :", borne_sup, "\n\n")
# Nombre d'outliers
n_outliers <- sum(var < borne_inf | var > borne_sup, na.rm = TRUE)
pct_outliers <- round(n_outliers / sum(!is.na(var)) * 100, 2)
cat("Nombre d'outliers :", n_outliers, "(", pct_outliers, "%)\n\n")
# Histogramme
hist(var, main = paste("Histogramme de", var_name), xlab = var_name, col = "lightblue", breaks = 50)
# Boxplot zoomé
ggplot(data, aes_string(y = var_name)) +
geom_boxplot(fill = "lightgreen") +
labs(title = paste("Boxplot de", var_name), y = var_name) +
coord_cartesian(ylim = quantile(var, probs = c(0.01, 0.99), na.rm = TRUE)) +
theme_minimal() +
theme(
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()
)
}
corriger_variable_quantitative <- function(data, var_name, seuil_inf_0 = TRUE) {
var <- data[[var_name]]
q1 <- quantile(var, 0.25, na.rm = TRUE)
q3 <- quantile(var, 0.75, na.rm = TRUE)
iqr <- q3 - q1
borne_inf <- q1 - 1.5 * iqr
borne_sup <- q3 + 1.5 * iqr
if (seuil_inf_0) {
borne_inf <- max(borne_inf, 0)
}
var_corr <- ifelse(var < borne_inf, borne_inf,
ifelse(var > borne_sup, borne_sup, var))
data[[var_name]] <- var_corr  # On remplace directement la variable
return(data)
}
# qte_kg
analyser_variable_quantitative(Base_X1_SemiApuree, "qte_kg")
Base_X1_SemiApuree <- corriger_variable_quantitative(Base_X1_SemiApuree, "qte_kg")
analyser_variable_quantitative(Base_X1_SemiApuree, "qte_kg")
# valeur_consommee
analyser_variable_quantitative(Base_X1_SemiApuree, "valeur_consommee")
Base_X1_SemiApuree <- corriger_variable_quantitative(Base_X1_SemiApuree, "valeur_consommee")
analyser_variable_quantitative(Base_X1_SemiApuree, "valeur_consommee")
# on recalcule la val_achat_cons
Base_X1_SemiApuree$val_achat_cons <- Base_X1_SemiApuree$valeur_consommee - Base_X1_SemiApuree$val_auto_cons - Base_X1_SemiApuree$val_don_cons
# Méthode de correction : la winsorisation #
###   4.2 Validation par les Kilocalories
conversion_cal <- calorie_conversion_tgo2021 %>%
transmute(
produit = as.numeric(codpr),         # S'assurer que c’est bien numérique
kcal_par_kg = cal * 10               # Convertir les 100g en kg (=> kcal/kg)
)
Base_X1_SemiApuree <- Base_X1_SemiApuree %>%
mutate(produit = as.numeric(produit)) %>%  # au cas où c’est un facteur
left_join(conversion_cal, by = "produit")
summary(Base_X1_SemiApuree$kcal_par_kg)
sum(is.na(Base_X1_SemiApuree$kcal_par_kg))   # nombre de produits non appariés
Base_X1_SemiApuree %>%
filter(is.na(kcal_par_kg)) %>%
distinct(produit)
unique(conversion_cal$produit)
Base_X1_SemiApuree <- Base_X1_SemiApuree %>%
mutate(kcal = qte_kg * kcal_par_kg)
S00_S01_membres <- S00_S01_membres %>%
mutate(ifmember = ifelse(s01q12 == 1 | s01q13 == 1, 1, 0)) %>%
rename(menage_id = interview__key)
taille_menage <- S00_S01_membres %>%
group_by(menage_id) %>%
summarise(nb_personnes = sum(ifmember, na.rm = TRUE), .groups = "drop")
Base_X1_SemiApuree <- Base_X1_SemiApuree %>%
left_join(taille_menage, by = "menage_id")
kcal_menage <- Base_X1_SemiApuree %>%
group_by(menage_id) %>%
summarise(kcal_total = sum(kcal, na.rm = TRUE), .groups = "drop")
Base_X1_SemiApuree <- Base_X1_SemiApuree %>%
left_join(kcal_menage, by = "menage_id")
Base_X1_SemiApuree <- Base_X1_SemiApuree %>%
mutate(kcal_par_tete = kcal_total / (7 * nb_personnes))
Base_X1_SemiApuree <- Base_X1_SemiApuree %>%
mutate(
indice_kcal = kcal_par_tete / 2400,
ecart_relatif = (kcal_par_tete - 2400) / 2400,
statut_kcal = case_when(
is.na(indice_kcal) ~ NA_character_,
indice_kcal < 1 & ecart_relatif < -0.2 ~ "aberrante sous le seuil",
indice_kcal < 1 & ecart_relatif >= -0.2 ~ "normal sous le seuil",
indice_kcal > 1 & ecart_relatif > 0.2 ~ "aberrante au dessus du seuil",
indice_kcal > 1 & ecart_relatif <= 0.2 ~ "normal au dessus du seuil"
)
)
# Total sans NA
total_obs <- Base_X1_SemiApuree %>%
filter(!is.na(kcal_par_tete)) %>%
nrow()
# Nombre de valeurs aberrantes
aberrantes <- Base_X1_SemiApuree %>%
filter(!is.na(kcal_par_tete)) %>%
filter(kcal_par_tete < 1920 | kcal_par_tete > 2880) %>%
nrow()
# Pourcentage
pourcentage_aberrantes <- round((aberrantes / total_obs) * 100, 2)
# Affichage
cat("Pourcentage de valeurs aberrantes :", pourcentage_aberrantes, "%\n") ## 89.99 % ( seuil problématique )
### 4.3 Enrichissement des Données
infos_geo <- Ehcvm_all %>%
select(
menage_id = interview__key,
region = s00q01,
departement = s00q02,
milieu = s00q04
) %>%
distinct()
Base_X1_Apuree <- Base_X1_SemiApuree %>%
left_join(infos_geo, by = "menage_id")
unique(Base_X1_Apuree$region)
unique(Base_X1_Apuree$departement)
unique(Base_X1_Apuree$milieu)
labels_region <- c(
DAKAR = 1, ZIGUINCHOR = 2, DIOURBEL = 3, "SAINT-LOUIS" = 4,
TAMBACOUNDA = 5, KAOLACK = 6, THIES = 7, LOUGA = 8,
FATICK = 9, KOLDA = 10, MATAM = 11, KAFFRINE = 12,
KEDOUGOU = 13, SEDHIOU = 14
)
labels_departement <- c(
DAKAR = 11, PIKINE = 12, RUFISQUE = 13, GUEDIAWAYE = 14,
BIGNONA = 21, OUSSOUYE = 22, ZIGUINCHOR = 23,
BAMBEY = 31, DIOURBEL = 32, M_BACKE = 33,
DAGANA = 41, PODOR = 42, "SAINT LOUIS" = 43,
BAKEL = 51, TAMBACOUNDA = 52, GOUDIRY = 53, KOUPENTOUM = 54,
KAOLACK = 61, NIORO = 62, GUINGUINEO = 63,
M_BOUR = 71, THIES = 72, TIVAOUANE = 73,
KEBEMER = 81, LINGUERE = 82, LOUGA = 83,
FATICK = 91, FOUNDIOUGNE = 92, GOSSAS = 93,
KOLDA = 101, VELINGARA = 102, MEDINA_YORO_FOULAH = 103,
MATAM = 111, KANEL = 112, RANEROU = 113,
KAFFRINE = 121, BIRKELANE = 122, KOUNGHEUL = 123,
MALEM_HODDAR = 124,
KEDOUGOU = 131, SALEMATA = 132, SARAYA = 133,
SEDHIOU = 141, BOUNKILING = 142, GOUDOMP = 143
)
labels_milieu <- c(
Urbain = 1, Rural = 2
)
Base_X1_Apuree <- Base_X1_Apuree %>%
mutate(
region = set_value_labels(region, labels = labels_region),
departement = set_value_labels(departement, labels = labels_departement),
milieu = set_value_labels(milieu, labels = labels_milieu)
)
chemin_sortie <- "C:/Users/moust/Downloads/data/data/Base_X1_Apuree.csv"
write.csv(Base_X1_Apuree, chemin_sortie, row.names = FALSE)
# ---------------------------------------------------------------------------------------------
#### Gestions des valeurs manquantes
sapply(Base_X1_Apuree[], function(x) mean(is.na(x)) * 100)
Base_X1_Apuree <- Base_X1_Apuree %>%
filter(!menage_id %in% verifications[["declaration_incomplete"]][["menage_id"]])
sapply(Base_X1_Apuree[], function(x) mean(is.na(x)) * 100)
geo_na <- Base_X1_Apuree %>%
filter(is.na(region) | is.na(departement) | is.na(milieu))
menages_absents <- geo_na$menage_id[!geo_na$menage_id %in% Ehcvm_all$interview__key]
length(menages_absents)  # → Nombre de ménages réellement absents de la table source
infos_geo_na <- Ehcvm_all %>%
select(menage_id = interview__key, region = s00q01, departement = s00q02, milieu = s00q04) %>%
filter(is.na(region) | is.na(departement) | is.na(milieu))
nrow(infos_geo_na)
Base_X1_Apuree <- Base_X1_Apuree %>%
mutate(
achat_non_applicable = ifelse(is.na(val_achat_cons) & frequence_achat == 0, TRUE, FALSE),
achat_manquant = ifelse(is.na(val_achat_cons) & frequence_achat > 0, TRUE, FALSE)
)
sapply(Base_X1_Apuree[], function(x) mean(is.na(x)) * 100)
Base_X1_Apuree <- Base_X1_Apuree %>%
mutate(
val_achat_cons = ifelse(is.na(val_achat_cons) & frequence_achat == 0, 0, val_achat_cons),
val_auto_cons = ifelse(is.na(val_auto_cons) , 0, val_auto_cons),
val_don_cons = ifelse(is.na(val_don_cons) , 0, val_don_cons)
)
Base_X1_Apuree$achat_non_applicable <- NULL
Base_X1_Apuree$achat_manquant <- NULL
library(VIM)
vars_explicatives <- c("produit", "unite_cons", "taille_cons",
"nb_personnes", "qte_kg", "frequence_achat",
"region", "departement", "milieu")
df_impute <- Base_X1_Apuree %>%
select(all_of(c("valeur_consommee", "kcal", vars_explicatives))) %>%
mutate(across(c(produit, unite_cons, taille_cons, region, departement, milieu), as.factor))
df_imputed <- kNN(
df_impute,
variable = c("valeur_consommee", "kcal"),
dist_var = vars_explicatives,
k = 5
)
Base_X1_Apuree$valeur_consommee <- df_imputed$valeur_consommee
Base_X1_Apuree$kcal <- df_imputed$kcal
Base_X1_Apuree$val_achat_cons <- Base_X1_Apuree$valeur_consommee - Base_X1_Apuree$val_don_cons - Base_X1_Apuree$val_auto_cons
table_kcal <- Base_X1_Apuree %>%
group_by(menage_id) %>%
summarise(
kcal_total = sum(kcal, na.rm = TRUE),
nb_personnes = first(nb_personnes),
.groups = "drop"
) %>%
mutate(
kcal_par_tete = kcal_total / (7 * nb_personnes),
ecart_relatif = ( kcal_par_tete - 2400 ) / 2400,
indice_kcal = kcal_par_tete / 2400,
statut_kcal = case_when(
is.na(indice_kcal) ~ NA_character_,
indice_kcal < 1 ~ "Sous le seuil",
TRUE ~ "Au dessus du seuil"
)
)
Base_X1_Apuree <- Base_X1_Apuree %>%
select(-kcal_total, -kcal_par_tete, -nb_personnes)
Base_X1_Apuree$kcal_par_tete <- NULL
Base_X1_Apuree$ecart_relatif <- NULL
Base_X1_Apuree$indice_kcal <- NULL
Base_X1_Apuree$statut_kcal <- NULL
Base_X1_Apuree <- Base_X1_Apuree %>%
left_join(table_kcal, by = "menage_id")
sapply(Base_X1_Apuree[], function(x) mean(is.na(x)) * 100)
library(labelled)
var_label(Base_X1_Apuree$valeur_consommee)     <- "Valeur estimée de la consommation (en FCFA)"
var_label(Base_X1_Apuree$qte_kg)               <- "Quantité consommée (en kilogrammes)"
var_label(Base_X1_Apuree$val_achat_cons)       <- "Valeur des achats de céréales (en FCFA)"
var_label(Base_X1_Apuree$val_auto_cons)        <- "Valeur de l'autoconsommation de céréales (en FCFA)"
var_label(Base_X1_Apuree$val_don_cons)         <- "Valeur des dons/trocs de céréales (en FCFA)"
var_label(Base_X1_Apuree$frequence_achat)      <- "Fréquence d'achat du produit pendant la période"
var_label(Base_X1_Apuree$kcal_par_kg)          <- "Apport calorique par kilogramme (kcal/kg)"
var_label(Base_X1_Apuree$kcal)                 <- "Apport calorique total de la quatitée consommée (en kcal)"
var_label(Base_X1_Apuree$region)               <- "Région de résidence du ménage"
var_label(Base_X1_Apuree$departement)          <- "Département de résidence du ménage"
var_label(Base_X1_Apuree$milieu)               <- "Milieu de résidence (Urbain ou Rural)"
var_label(Base_X1_Apuree$kcal_total)           <- "Apport calorique total du ménage sur 7 jours (en kcal)"
var_label(Base_X1_Apuree$nb_personnes)         <- "Nombre de personnes dans le ménage"
var_label(Base_X1_Apuree$kcal_par_tete)        <- "Apport calorique moyen par personne sur les 7 dernier jours (kcal/personne)"
var_label(Base_X1_Apuree$indice_kcal)          <- "Rapport entre kcal_par_tete et le seuil de 2400"
var_label(Base_X1_Apuree$ecart_relatif)        <- "Ecart relatif entre kcal_par_tete et le seuil"
var_label(Base_X1_Apuree$indice_kcal)          <- "Indice par rapport au seuil de 2400 kcal/jour/personne"
var_label(Base_X1_Apuree$statut_kcal)          <- "Statut nutritionnel du ménage (en dessous ou au-dessus du seuil)"
chemin_sortie <- "C:/Users/moust/Downloads/data/data/Base_X1_Apuree.csv"
write.csv(Base_X1_Apuree, chemin_sortie, row.names = FALSE)
# ---------------------------------------------------------------------------------------------
####   5. Analyses Statistiques
# Chargement du package nécessaire
library(dplyr)
# Création de la base ménage
Base_menage <- Base_X1_Apuree %>%
group_by(menage_id) %>%
summarise(
# --- Données nutritionnelles et de consommation ---
kcal_total = first(kcal_total),                # déjà au niveau ménage
nb_personnes = first(nb_personnes),            # taille du ménage
kcal_par_tete = first(kcal_par_tete),          # kcal moyen/personne
indice_kcal = first(indice_kcal),              # indice kcal
ecart_relatif = first(ecart_relatif),          # écart relatif au seuil
statut_kcal = first(statut_kcal),              # statut nutritionnel
# --- Valeurs monétaires totales (somme sur les produits) ---
total_valeur_consommee = sum(valeur_consommee, na.rm = TRUE),
total_val_achat = sum(val_achat_cons, na.rm = TRUE),
total_val_auto = sum(val_auto_cons, na.rm = TRUE),
total_val_don = sum(val_don_cons, na.rm = TRUE),
# --- Diversité alimentaire ---
nb_produits = n_distinct(produit),             # diversité de produits
# --- Localisation (invariables au sein du ménage) ---
region = first(region),
departement = first(departement),
milieu = first(milieu)
) %>%
ungroup()
library(labelled)
var_label(Base_menage$menage_id)              <- "Identifiant unique du ménage"
var_label(Base_menage$kcal_total)             <- "Apport calorique total du ménage sur les 7 derniers jours (kcal)"
var_label(Base_menage$nb_personnes)           <- "Nombre de personnes dans le ménage"
var_label(Base_menage$kcal_par_tete)          <- "Apport calorique moyen par personne par jour (sur sur les 7 derniers jours)"
var_label(Base_menage$indice_kcal)            <- "Indice par rapport au seuil de 2400 kcal/jour/personne"
var_label(Base_menage$ecart_relatif)          <- "Écart relatif au seuil de 2400 kcal/jour/personne"
var_label(Base_menage$statut_kcal)            <- "Statut nutritionnel (sous ou au-dessus du seuil)"
var_label(Base_menage$total_valeur_consommee) <- "Valeur totale de la consommation alimentaire (FCFA) sur les 7 derniers jours"
var_label(Base_menage$total_val_achat)        <- "Valeur totale des achats alimentaires (FCFA) sur les 7 derniers jours"
var_label(Base_menage$total_val_auto)         <- "Valeur totale de l'autoconsommation (FCFA) sur les 7 derniers jours"
var_label(Base_menage$total_val_don)          <- "Valeur totale des dons alimentaires (FCFA) sur les 7 derniers jours"
var_label(Base_menage$nb_produits)            <- "Nombre de produits alimentaires différents consommés sur les 7 derniers jours"
var_label(Base_menage$region)                 <- "Région de résidence du ménage"
var_label(Base_menage$departement)            <- "Département de résidence du ménage"
var_label(Base_menage$milieu)                 <- "Milieu de résidence (urbain/rural)"
chemin_sortie_csv <- "C:/Users/HP/Desktop/ISEP2/Semestre2/Logiciel R/Projet/outputs/Base_menage.csv"
write.csv(Base_menage, file = chemin_sortie_csv, row.names = FALSE, fileEncoding = "UTF-8")
chemin_sortie_csv <- "C:/Users/moust/Downloads/data/data/Base_menage.csv"
write.csv(Base_menage, file = chemin_sortie_csv, row.names = FALSE, fileEncoding = "UTF-8")
View(Base_X1_Apuree)
library(PackageCerealesSN)
install.packages("packageCerealesSN")
install.packages("devtools")
devtools::load_all()
devtools::document()
devtools::document()
run_app()
devtools::install()
system.file("app", package = "packageCerealesSN")
devtools::document()
devtools::install(build_vignettes = FALSE, reload = TRUE)
system.file("app", package = "PackageCerealesSN")
packageCerealesSN::run_app()
runApp('inst/app/app.R.R')
data <- read.dta("C:/Users/moust/Downloads/Ehcvm_all.dta")
library(haven)
data <- read.dta("C:/Users/moust/Downloads/Ehcvm_all.dta")
library(haven)
data <- read_dta("C:/Users/moust/Downloads/Ehcvm_all.dta")
print(data$s00q01)
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
library(shiny); runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
library(shiny); runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
runApp('inst/app/app.R.R')
# Charger les bibliothèques nécessaires
library(dplyr)
# Lire le fichier CSV
base_menage <- read.csv("base_menage.csv")
# Charger les bibliothèques nécessaires
library(dplyr)
# Lire le fichier CSV
base_menage <- read.csv("Base_menage.csv")
# Charger les bibliothèques nécessaires
library(dplyr)
# Lire le fichier CSV
base_menage <- read.csv("C:/Users/moust/Downloads/Base_menage.csv")
# Identifier les colonnes numériques (exclure les colonnes d'identifiant)
colonnes_numeriques <- sapply(base_menage, is.numeric)
colonnes_numeriques <- names(colonnes_numeriques[colonnes_numeriques == TRUE])
# Exclure les colonnes d'identifiant si elles sont numériques
colonnes_a_exclure <- c("menage_id", "region", "taille")  # ajustez selon vos noms de colonnes
colonnes_numeriques <- setdiff(colonnes_numeriques, colonnes_a_exclure)
# Fonction pour calculer la moyenne pondérée
moyenne_ponderee <- function(x, poids) {
if(all(is.na(x)) || all(is.na(poids)) || sum(poids, na.rm = TRUE) == 0) {
return(NA)
}
return(sum(x * poids, na.rm = TRUE) / sum(poids, na.rm = TRUE))
}
# Calculer les moyennes pondérées par région
resultats <- base_menage %>%
group_by(region) %>%
summarise(
across(all_of(colonnes_numeriques),
~ moyenne_ponderee(.x, taille),
.names = "moy_pond_{.col}"),
nb_menages = n(),
taille_totale = sum(taille, na.rm = TRUE),
.groups = "drop"
)
# Charger les bibliothèques nécessaires
library(dplyr)
# Lire le fichier CSV
base_menage <- read.csv("C:/Users/moust/Downloads/Base_menage.csv")
# Identifier les colonnes numériques (exclure les colonnes d'identifiant)
colonnes_numeriques <- sapply(base_menage, is.numeric)
colonnes_numeriques <- names(colonnes_numeriques[colonnes_numeriques == TRUE])
# Exclure les colonnes d'identifiant si elles sont numériques
colonnes_a_exclure <- c("menage_id", "region", "nb_personnes")  # ajustez selon vos noms de colonnes
colonnes_numeriques <- setdiff(colonnes_numeriques, colonnes_a_exclure)
# Fonction pour calculer la moyenne pondérée
moyenne_ponderee <- function(x, poids) {
if(all(is.na(x)) || all(is.na(poids)) || sum(poids, na.rm = TRUE) == 0) {
return(NA)
}
return(sum(x * poids, na.rm = TRUE) / sum(poids, na.rm = TRUE))
}
# Calculer les moyennes pondérées par région
resultats <- base_menage %>%
group_by(region) %>%
summarise(
across(all_of(colonnes_numeriques),
~ moyenne_ponderee(.x, nb_personnes),
.names = "moy_pond_{.col}"),
nb_menages = n(),
taille_totale = sum(nb_personnes, na.rm = TRUE),
.groups = "drop"
)
# Afficher les résultats
print(resultats)
# Optionnel : sauvegarder les résultats
write.csv(resultats, "moyennes_ponderees_par_region.csv", row.names = FALSE)
View(resultats)
library(shiny); runApp('inst/app/app.R.R')
library(PackageCerealesSN)
library(PackageCerealesSN)
library(PackageCerealesSN)
plot_map("C:/Users/moust/Downloads/shapefiles/shapefiles/qte_consommee.csv")
library(readxl)
qte_consommee <- read_excel("C:/Users/moust/Downloads/shapefiles/shapefiles/qte_consommee.csv")
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
library(PackageCerealesSN)
plot_map(qte_consommee)
plot_map(qte_consommee)
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
library(PackageCerealesSN)
plot_map(qte_consommee)
devtools::load_all(".")
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
library(PackageCerealesSN)
plot_map(qte_consommee)
devtools::load_all(".")
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
library(PackageCerealesSN)
plot_map(qte_consommee)
names(qte_consommee)
class(qte_consommee)
find("plot_map")
?plot_map
# 1. Charger shapefile (une seule fois)
regions_sf <- st_read("chemin/Limite_Région.shp")
library(sf)
regions_sf <- st_read("chemin/Limite_Région.shp")
regions_sf <- st_read(chemin,"Limite_Région.shp")
library(PackageCerealesSN)
plot_map(qte_consommee)
library(sf)
library(PackageCerealesSN)
# 1. Charger shapefile (une seule fois)
regions_sf <- st_read(chemin,"Limite_Région.shp")
library(sf)
library(PackageCerealesSN)
# 1. Charger shapefile (une seule fois)
regions_sf <- st_read("C:/Users/moust/Downloads/data/data/Limite_Région.shp")
# 2. Charger ta table de quantités (une seule fois)
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
# 3. Fusionner shapefile et données tabulaires
merged_data <- merge(regions_sf, qte_consommee, by = "NOMREG")
# 4. Tracer la carte avec l’objet spatial fusionné
plot_map(merged_data)
names(merged_data)
class(merged_data)
class(merged_data$quantite)
summary(merged_data$quantite)
plot_map(merged_data, var = "quantite")
library(sf)
library(PackageCerealesSN)
# 1. Charger shapefile (une seule fois)
regions_sf <- st_read("C:/Users/moust/Downloads/data/data/Limite_Région.shp")
# 2. Charger ta table de quantités (une seule fois)
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
# 3. Fusionner shapefile et données tabulaires
merged_data <- merge(regions_sf, qte_consommee, by = "NOMREG")
# 4. Tracer la carte avec l’objet spatial fusionné
plot_map(merged_data)
devtools::load_all(".")
library(sf)
library(PackageCerealesSN)
# 1. Charger shapefile (une seule fois)
regions_sf <- st_read("C:/Users/moust/Downloads/data/data/Limite_Région.shp")
# 2. Charger ta table de quantités (une seule fois)
qte_consommee <- read.csv(paste0(chemin, "/qte_consommee.csv"))
# 3. Fusionner shapefile et données tabulaires
merged_data <- merge(regions_sf, qte_consommee, by = "NOMREG")
# 4. Tracer la carte avec l’objet spatial fusionné
plot_map(merged_data)
View(qte_consommee)
library(PackageCerealesSN)
